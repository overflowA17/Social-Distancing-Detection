# -*- coding: utf-8 -*-
"""Social Distance Detector.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/159gMLDtmrhW3Pfq474A-x8TG7aPBW7Wf

# **Computer Vision & Internet of Things**

# **SOCIAL DISTANCING DETECTOR**

By Anubhav Sarkar

#### Objective:

* Implement a real time Social Distancing detector which can identify the distance between two individuals in a crowd.

### Importing Libraries
"""

import numpy as np
import cv2
from google.colab.patches import cv2_imshow
from scipy.spatial import distance as dist
import argparse
import imutils
import os

"""### Setting up variable values

Initialising minimum probability to filter weak detection salong with the threshold when applying non maxima supression
"""

MIN_CONF = 0.3
NMS_THRESH = 0.3

"""defining the min safe distance in pixels that two ppl can be from each other"""

MIN_DISTANCE = 40

"""### Creating People detection Function"""

def detect_people(frame, net, ln, personIdx = 0):
  #grabbing the dimensions of the frame and initializing the list of results
  (H, W) = frame.shape[:2]
  results = []

  # constructing a blob from the input frame and then perform a forward pass  of the YOLO object detector, giving us our bounding boxes and associated probabilities
  blob = cv2.dnn.blobFromImage(frame, 1 / 255.0, (416, 416), swapRB=True, crop=False)
  net.setInput(blob)
  layerOutputs = net.forward(ln)
  #initialising our lists of detected bounding boxes, centroids, and confidences respectively
  boxes = []
  centroids = []
  confidences = []

  #looping over each layer outputs
  for output in layerOutputs:
    
    #looping over each of the detections
    for detection in output:
      # extracting the class ID and confidences(probability) of the current object detection
      scores = detection[5:]
      classID = np.argmax(scores)
      confidence = scores[classID]
			
			

      # filtering detections by (1) ensuring that the object detected was a person and (2) that the minimum confidence is met
      if classID == personIdx and confidence > MIN_CONF:
			
				# scaling the bounding box coordinates back relative to the size of the image,  YOLO  returns the center (x, y)-coordinates of the bounding box followed by the boxes' width and height
        box = detection[0:4] * np.array([W, H, W, H])
        (centerX, centerY, width, height) = box.astype("int")

				# using the center (x, y)-coordinates to derive the top# and and left corner of the bounding box
        x = int(centerX - (width / 2))
        y = int(centerY - (height / 2))
				
				

				# updating our list of bounding box coordinates, centroids, and confidences
        boxes.append([x, y, int(width), int(height)])
        centroids.append((centerX, centerY))
        confidences.append(float(confidence))
				
				
				

	# applying non-maxima suppression to suppress weak, overlapping bounding boxes
  idxs = cv2.dnn.NMSBoxes(boxes, confidences, MIN_CONF, NMS_THRESH)
	

	# ensuring at least one detection exists
  if len(idxs) > 0:
	

		# looping over the indexes
    for i in idxs.flatten():
		
			# extract the bounding box coordinates
      (x, y) = (boxes[i][0], boxes[i][1])
      (w, h) = (boxes[i][2], boxes[i][3])
			
			

			# updating our results list to consist of the person prediction probability, bounding box coordinates, and the centroid
      r = (confidences[i], (x, y, x + w, y + h), centroids[i])
      results.append(r)
			
			

	# return the list of results
  return results

"""### Capturing Real time video to detect social distancing

We will not be doing this now I have used a video recording from a cctv from youtube for demostration purpose

but to do it we just have to run these cells
"""

from IPython.display import display, Javascript,HTML
from google.colab.output import eval_js
from base64 import b64decode
 
def record_video(filename):
  js=Javascript("""
    async function recordVideo() {
      const options = { mimeType: "video/webm; codecs=vp9" };
      const div = document.createElement('div');
      const capture = document.createElement('button');
      const stopCapture = document.createElement("button");
       
      capture.textContent = "Start Recording";
      capture.style.background = "orange";
      capture.style.color = "white";
 
      stopCapture.textContent = "Stop Recording";
      stopCapture.style.background = "red";
      stopCapture.style.color = "white";
      div.appendChild(capture);
 
      const video = document.createElement('video');
      const recordingVid = document.createElement("video");
      video.style.display = 'block';
 
      const stream = await navigator.mediaDevices.getUserMedia({audio:true, video: true});
     
      let recorder = new MediaRecorder(stream, options);
      document.body.appendChild(div);
      div.appendChild(video);
 
      video.srcObject = stream;
      video.muted = true;
 
      await video.play();
 
      google.colab.output.setIframeHeight(document.documentElement.scrollHeight, true);
 
      await new Promise((resolve) => {
        capture.onclick = resolve;
      });
      recorder.start();
      capture.replaceWith(stopCapture);
 
      await new Promise((resolve) => stopCapture.onclick = resolve);
      recorder.stop();
      let recData = await new Promise((resolve) => recorder.ondataavailable = resolve);
      let arrBuff = await recData.data.arrayBuffer();
       
      // stop the stream and remove the video element
      stream.getVideoTracks()[0].stop();
      div.remove();
 
      let binaryString = "";
      let bytes = new Uint8Array(arrBuff);
      bytes.forEach((byte) => {
        binaryString += String.fromCharCode(byte);
      })
    return btoa(binaryString);
    }
  """)
  try:
    display(js)
    data=eval_js('recordVideo({})')
    binary=b64decode(data)
    with open(filename,"wb") as video_file:
      video_file.write(binary)
    print(f"Finished recording video at:{filename}")
  except Exception as err:
    print(str(err))

"""#### Saving the video as mp4"""

video_path = "/content/p.mp4"
record_video(video_path)

"""### Grabbing frames from video and making prediction measuring detected people"""

# constructing the argument parse and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-i", "--input", type=str, default="",
	help="path to (optional) input video file")
ap.add_argument("-o", "--output", type=str, default="",
	help="path to (optional) output video file")
ap.add_argument("-d", "--display", type=int, default=1,
	help="whether or not output frame should be displayed")
args = vars(ap.parse_args(["--input","/content/p.mp4","--output","my_output.avi","--display","1"]))

# loading the COCO class labels our YOLO model was trained on
labelsPath = os.path.sep.join(["/content/coco.names"])
LABELS = open(labelsPath).read().strip().split("\n")

# deriving the paths to the YOLO weights and model configuration
weightsPath = os.path.sep.join(["/content/yolov3.weights"])
configPath = os.path.sep.join(["/content/yolov3.cfg"])

# loading our YOLO object detector trained on COCO dataset (80 classes)
print("[INFO] loading YOLO from disk...")
net = cv2.dnn.readNetFromDarknet(configPath, weightsPath)

# determining only the *output* layer names that we need from YOLO
ln = net.getLayerNames()
ln = [ln[i[0] - 1] for i in net.getUnconnectedOutLayers()]

# initializing the video stream and pointer to output video file
print("[INFO] accessing video stream...")
vs = cv2.VideoCapture(args["input"] if args["input"] else 0)
writer = None

# looping over the frames from the video stream
while True:
	# read the next frame from the file
	(grabbed, frame) = vs.read()

	# if the frame was not grabbed, then we have reached the end
	# of the stream
	if not grabbed:
		break

	# resize the frame and then detect people (and only people) in it
	frame = imutils.resize(frame, width=700)
	results = detect_people(frame, net, ln,
		personIdx=LABELS.index("person"))

	# initialize the set of indexes that violate the minimum social
	# distance
	violate = set()

	# ensure there are *at least* two people detections (required in
	# order to compute our pairwise distance maps)
	if len(results) >= 2:
		# extract all centroids from the results and compute the
		# Euclidean distances between all pairs of the centroids
		centroids = np.array([r[2] for r in results])
		D = dist.cdist(centroids, centroids, metric="euclidean")

		# loop over the upper triangular of the distance matrix
		for i in range(0, D.shape[0]):
			for j in range(i + 1, D.shape[1]):
				# check to see if the distance between any two
				# centroid pairs is less than the configured number
				# of pixels
				if D[i, j] < MIN_DISTANCE:
					# update our violation set with the indexes of
					# the centroid pairs
					violate.add(i)
					violate.add(j)

	# loop over the results
	for (i, (prob, bbox, centroid)) in enumerate(results):
		# extract the bounding box and centroid coordinates, then
		# initialize the color of the annotation
		(startX, startY, endX, endY) = bbox
		(cX, cY) = centroid
		color = (0, 255, 0)

		# if the index pair exists within the violation set, then
		# update the color
		if i in violate:
			color = (0, 0, 255)

		# draw (1) a bounding box around the person and (2) the
		# centroid coordinates of the person,
		cv2.rectangle(frame, (startX, startY), (endX, endY), color, 2)
		cv2.circle(frame, (cX, cY), 5, color, 1)

	# draw the total number of social distancing violations on the
	# output frame
	text = "At risk: {}".format(len(violate))
	cv2.putText(frame, text, (10, frame.shape[0] - 25),
		cv2.FONT_HERSHEY_SIMPLEX, 0.85, (0, 0, 255), 3)

	# check to see if the output frame should be displayed to our
	# screen
	if args["display"] > 0:
		# show the output frame
		cv2_imshow(frame)
		key = cv2.waitKey(1) & 0xFF

		# if the `q` key was pressed, break from the loop
		if key == ord("q"):
			break

	# if an output video file path has been supplied and the video
	# writer has not been initialized, do so now
	if args["output"] != "" and writer is None:
		# initialize our video writer
		fourcc = cv2.VideoWriter_fourcc(*"MJPG")
		writer = cv2.VideoWriter(args["output"], fourcc, 25,
			(frame.shape[1], frame.shape[0]), True)

	# if the video writer is not None, write the frame to the output
	# video file
	if writer is not None:
		writer.write(frame)

"""since we have used yolo we would be needing these 3 files

* coco.names
* yolov3.cfg
* yolov3.weights

use the GPU of Google Colab for this project

Since I have already run my project I will just show u the output file

I have saved the output file as my_output.avi which you will need to download

# THANK YOU!
"""